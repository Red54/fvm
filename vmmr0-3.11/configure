#!/bin/bash

# minimum is 2.6.x
min_kernel_version=24
# maximum is 3.x
max_kernel_version=11

host_os=
force_build=
kernelsourcedir=
kerneldir=/lib/modules/$(uname -r)/build
cc=gcc
ld=ld
objcopy=objcopy
ar=ar
want_module=1
cross_prefix=
arch=`uname -m`
linker="ld"
mingw_include_path=
ddk_lib_path=
mingw_lib_path=

arch_specified=0

if [ -z "TMPDIR" ] ; then
    TMPDIR=.
fi

usage() {
    cat <<-EOF
	Usage: $0 [options]
	
	Options:
	    --arch=ARCH
            architecture to compile
			
	    --host=HOST_OS           					
            host operating system(valid: linux|windows)
			
	    --linker=LINKER          					
            set linker (valid: ld|link)
			
	    --mingw_include_path=MINGW_INCLUDE_PATH     
            set mingw library path when build for windows
            eg: "/c/mingw64/mingw/include/ddk"
			
	    --ddk_lib_path=DDK_LIB_PATH					
            set ddk library path when build for windows   
			
	    --mingw_lib_path=DDK_LIB_PATH				
            set mingw library path when build for windows
			
	    --help                   					
            你懂的  U Know
EOF
    exit 1
}

while [[ "$1" = -* ]]; do
    opt="$1"; shift
    arg=
    hasarg=
    if [[ "$opt" = *=* ]]; then
	arg="${opt#*=}"
	opt="${opt%%=*}"
	hasarg=1
    fi
    case "$opt" in
	--arch)
	    arch="$arg"
		$arch_specified=1
	    ;;
	--host)
	    host_os="$arg"
		;;
	--linker)
	    linker="$arg"
	    ;;
	--mingw_include_path)
	    mingw_include_path="$arg"
	    ;;
	--ddk_lib_path)
	    ddk_lib_path="$arg"
	    ;;
	--mingw_lib_path)
	    mingw_lib_path="$arg"
	    ;;
	--help)
	    usage
	    ;;
	*)
	    usage
	    ;;
    esac
done

karch="$arch"

case $arch in
    i?86*|x86_64*)
        arch=${arch/#i?86/i386}
	karch="x86"
        ;;
esac

if [ "$host_os" == "" ]
then
	if uname | grep -i linux > /dev/null
	then
		echo "configuring for linux environment..."
    	host_os='HOST_LINUX'
	fi
	if uname | grep -i mingw > /dev/null
	then
		echo "configuring for MINGW environment..."
    	host_os='HOST_WINDOWS'
	fi
	if [ "$host_os" == "" ]
	then
		echo "host os is not defined, default to linux"
    	host_os='HOST_LINUX'
    fi
else
	case $host_os in
		"linux")
		echo "configuring for linux environment..."
		host_os='HOST_LINUX'
		;;
		"windows")
		echo "configuring for MINGW environment..."
		host_os='HOST_WINDOWS'
		;;
		*)
		echo "invalid host os(valid: linux|windows)"
		exit -1
		;;
	esac
fi

arch=${arch%%-*}


do_linux_configure()
{
kerneldir=$(cd $kerneldir; pwd)
    
# see if we have split build and source directories
if [ ! -e "$kerneldir/Kbuild" ]
then
    kernelsourcedir=$kerneldir/source
    if [ ! -L "$kernelsourcedir" ]
	then
        kernelsourcedir=${kerneldir%/build*}/source
    fi
fi

kernel_version_str=
if [ -e "$kerneldir/.kernelrelease" ]
then
	kernel_version_str=`cat "$kerneldir/.kernelrelease"`
elif [ -e "$kerneldir/include/config/kernel.release" ]
then
	kernel_version_str=`cat "$kerneldir/include/config/kernel.release"`
elif [ -e "$kerneldir/.config" ]
then
	kernel_version_str=$(awk '/Linux kernel version:/ { print $NF }' \
		"$kerneldir/.config")
fi
if [ ! -n "$kernel_version_str" ]
then
	echo
	echo "Error: no valid linux kernel found."
	echo
	exit 1
fi

kernel_version=`echo $kernel_version_str | sed 's/\([0-9]*\)\.[0-9]*\.[0-9]*.*/\1/'`
kernel_patchlevel=`echo $kernel_version_str | sed 's/[0-9]*\.\([0-9]*\)\.[0-9]*.*/\1/'`
kernel_sublevel=`echo $kernel_version_str | sed 's/[0-9]*\.[0-9]*\.\([0-9]*\).*/\1/'`

if [ $kernel_version -eq 2 ] && [ $kernel_sublevel -lt $min_kernel_version ]
then
	echo
	echo "Error: this linux kernel is too old."
	echo
	exit 1
elif [ $kernel_version -eq 3 ] && [ $kernel_patchlevel -gt $max_kernel_version ]
then
	echo
	echo "Error: this linux kernel is not supported."
	echo
	exit 1
fi
    
kernel_extraversion=`echo $kernel_version_str | sed 's/[0-9]*\.[0-9]*\.[0-9]*\.\([0-9]*\)*.*/\1/'`
if [ ! -n $kernel_extraversion ] || [ $kernel_extraversion = $kernel_version_str ]
then
	kernel_extraversion=0
fi

. "$kerneldir/.config"


if [ -n "$no_uname" -a "$want_module" ]
then
	depmod_version=$kernel_version_str
fi

# Check if it is a Fedora kernel, e.g. 2.6.35.13-91.fc14.x86_64
if echo "$kernel_version_str" | grep -qE '[0-9.-]+\.fc[0-9]+\..+'
then
	config_fedora_kernel="#define CONFIG_FEDORA_KERNEL 1"
else
	config_fedora_kernel="#undef CONFIG_FEDORA_KERNEL"
fi

cp -f ./mak_linux Makefile
rm -f include/uapi/asm
mkdir -p include/uapi
ln -sf ../asm include/uapi/asm
}

do_windows_configure()
{

if [ $arch_specified -ne 1 ]
then

	cat <<EOF > testarch.c
	#include <stdio.h>
	int main()
	{
		FILE* fp = fopen("testarch.len", "wb+");
		fprintf(fp, "%d", sizeof(void*));
		fclose(fp);
		return sizeof(void*);
	}
EOF
	
	gcc testarch.c -o testarch.exe
	
	./testarch
	
	ptrlen=$(cat testarch.len)
	
	if [ "$ptrlen" == "8" ]
	then
		arch="x86_64"
	else
		arch="i386"
	fi

	echo "bits per long is" $ptrlen ", configuring for" $arch "..."
	
	rm -f testarch.exe
	rm -f testarch.c
	rm -f testarch.len
	
fi

if [ "$mingw_include_path" == "" ]
then
	echo "When you build for windows, you must tell me where the mingw headers are."
	exit -1
fi

if [ "$linker" == "link" ]
then
	if [ "$ddk_lib_path" == "" ]
	then
		echo "When you use ms link.exe, you must tell me where the ddk library is."
		echo "eg: \"C:\WinDDK\7600.16385.1\lib\win7\amd64\""
		echo "eg: \"C:\WinDDK\7600.16385.1\lib\win7\i386\""
		
		exit -1
	fi
else
	if [ "$linker" == "ld" ]
	then
		if [ "$mingw_lib_path" == "" ]
		then
			echo "When you use ld, you must tell me where the mingw library is."
			echo "eg: \"C:\mingw\lib\""
			echo "eg: \"C:\mingw64\lib\""
			
			exit -1
		fi
	else
		echo "invalid linker!"
		
		exit -1
	fi
fi

cp -f ./lib/seh/$arch/seh.o ./
cp -f ./mak_windows_"$arch" Makefile
}

case $host_os in
	"HOST_LINUX")
	do_linux_configure
	;;
	"HOST_WINDOWS")
	do_windows_configure
	;;
	*)
	echo "unexpected host os: " $host_os
	exit -1
	;;
esac
	
	
cat <<EOF > config.mak
export ARCH=$arch
export HOST=$host_os
PREFIX=$prefix
KERNELDIR=$kerneldir
KERNELSOURCEDIR=$kernelsourcedir
KERNELVERSION=$kernel_version_str
export LINKER=$linker
export MINGW_INCLUDE_PATH=$mingw_include_path
export DDK_LIB_PATH=$ddk_lib_path
export MINGW_LIB_PATH=$mingw_lib_path
export CROSS_COMPILE=$cross_prefix
export CC=$cross_prefix$cc
export LD=$cross_prefix$ld
export OBJCOPY=$cross_prefix$objcopy
export AR=$cross_prefix$ar
export MINGW_PATH=$mingw_path
EOF

cat <<EOF > vmmr0-config.h
#define KERNEL_EXTRAVERSION $kernel_extraversion
$config_fedora_kernel
#define $host_os
#ifdef HOST_LINUX
#define HOST_LONG_SIZE 8
#else
#ifdef HOST_WINDOWS
#define HOST_LONG_SIZE 4
#endif //HOST_WINDOWS
#endif //HOST_LINUX
#ifndef HOST_LONG_SIZE
#error "HOST_LONG_SIZE undefined!"
#endif
EOF


echo done.
